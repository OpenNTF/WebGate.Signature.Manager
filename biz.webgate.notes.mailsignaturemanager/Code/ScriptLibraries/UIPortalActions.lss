'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare
Use "Setup"
Use "SignaturFactory"
Use "WGCLogIncubinator"
Use "NotesDominoDirectory"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Function ExpandGroupNames(servername As String, pstrGroupName As variant, membersToImport As Variant) As Boolean
Declare Private Sub zzzDoQS( sA() As String, bottom As Long, top As Long )
Declare Sub pushToMailFile(strTemplate As String, uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase, dclSelect As NotesDocumentCollection)
Declare Sub setActive(strTemplate As String, uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase, dclSelect As NotesDocumentCollection)
Declare Sub importNAB ( strSchema As String, sesCurrent As NotesSession, setCurrent As Setup, sigFactory As SignaturFactory, uiwCurrent As NotesUIWorkspace)	
Declare Sub setInActive(strTemplate As String, uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase, dclSelect As NotesDocumentCollection)
Declare private Function zzzQuickSort(sArray As Variant) As Variant
Declare Private Sub zzzImportPerson ( sigFactory As SignaturFactory, ndbCurrent As NotesDatabase, docNab As NotesDocument, strSchema As string )
Declare Function getSchema(uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase) As String
Declare Sub createDisclaimer( strSchema As String, uiwCurrent As NotesUIWorkspace,ndbCurrent As NotesDatabase)
Declare Sub newSignature( strTemplate As String, uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase, setCurrent As Setup, sigFactory As SignaturFactory)
Declare Sub setRefresh(strTemplate As String, uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase, sigFactory As SignaturFactory, dclSelect As NotesDocumentCollection)
Declare function importNABexec ( strSchema As String, sesCurrent As NotesSession, setCurrent As Setup, sigFactory As SignaturFactory, uiwCurrent As NotesUIWorkspace) As long
Declare private Sub zzzDoInsertSort ( sA() As String, ByVal bottom As Long, ByVal top As Long )	
Declare Sub resetCalendarProfile ( uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase )
Declare Sub createSchema( uiwCurrent As NotesUIWorkspace,ndbCurrent As NotesDatabase)
Declare Sub setNewSchema(strTemplate As String, uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase, sigFactory As SignaturFactory, dclSelect As NotesDocumentCollection)

'++LotusScript Development Environment:2:5:(Declarations):0:2

'++LotusScript Development Environment:2:1:ExpandGroupNames:1:8
Function ExpandGroupNames(servername As String, pstrGroupName As variant, membersToImport As Variant) As Boolean
	On Error GoTo ErrorHandler
	
	Dim i As Integer
	Dim members As Variant
	Dim dd As New NotesDominoDirectory (servername)
	
	ExpandGroupNames = False
	
	If Len(Trim$(pstrGroupName(0))) = 0 Then
		Exit function 'no group name passed => quit
	End If
	
	For i = 0 To UBound(pstrGroupName)
		members = dd.ExplodeGroup (pstrGroupName(i))
		
		If isarray(membersToImport) Then
			membersToImport = ArrayUnique(ArrayAppend(membersToImport, members))
		Else
			membersToImport = members
		End If 
				
nextgroup:
	Next
	
	membersToImport = zzzQuickSort(membersToImport)
	
	ExpandGroupNames = True
	
	Exit Function
	
ErrorHandler:
	Call WGCLI_LogError("Error in expandGroupNames", Nothing)	
	Exit function
End Function

'++LotusScript Development Environment:2:2:zzzDoQS:2:8

Private Sub zzzDoQS( sA() As String, bottom As Long, top As Long )
     ' Called by QuickSort
     ' Uses Public variable sA  (array of string)
	Dim length As Long
	Dim i As Long
	Dim j As Long
	Dim Pivot As Long
	Dim PivotValue As String
	Dim t As String
	Dim LastSmall As Long
	length = top - bottom + 1
	
     ' Only do the QuickSort if the sublist is at least 10 items long
	If length > 10 Then
          ' Pivot is chosen approx. halfway through sublist.
          ' This gives us best speed if list is almost sorted already, and is no worse than any
          ' other choice if the list is in random order.
		Pivot = bottom + (length \ 2)   
		
          ' Move PivotValue out of the way
		PivotValue = sA( Pivot )
		sA ( Pivot ) = sA ( bottom )
		sA ( bottom ) = PivotValue
		
          ' LastSmall is the location of the last value smaller than PivotValue
		LastSmall = bottom
		For i = bottom + 1 To top 
			If sA ( i ) < PivotValue Then 
				LastSmall = LastSmall + 1
				t = sA ( i )
				sA ( i ) = sA ( LastSmall )
				sA ( LastSmall ) = t
			End If
		Next
		
          ' Move the PivotValue back
		t = sA ( LastSmall )
		sA ( LastSmall ) = sA ( bottom )
		sA ( bottom ) = t
		Pivot = LastSmall
		
          ' Now sort each side
		Call zzzDoQS ( sA, bottom, Pivot - 1 )
		Call zzzDoQS ( sA, Pivot + 1, top )
	End If
	
End Sub

'++LotusScript Development Environment:2:2:pushToMailFile:5:8
%REM
	Sub pushToMailFile
	Description: Comments for Sub
%END REM
Sub pushToMailFile(strTemplate As String, uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase, dclSelect As NotesDocumentCollection)
	Const CON_VIEW_NAME = "plSignatureActive"
	
	Dim agtPush As NotesAgent
	Dim dclCurrent As NotesDocumentCollection
	Dim docNext As NotesDocument
	Dim docProcess As NotesDocument
	Dim docTemp As NotesDocument
	Dim docid As String
	Dim count As Integer
	
	If dclSelect Is Nothing Then
		'started from portal => select document(s) now
		'pre check if there are documents...
		Set dclCurrent = ndbCurrent.Getview(CON_VIEW_NAME).Getalldocumentsbykey(strTemplate, True)
		If dclCurrent.count = 0 Then
			MessageBox "Für das Schema "& strTemplate & " gibt es keine übertragbaren Signaturen.",0+48,ndbCurrent.Title
			Exit Sub
		End If
		
		Set dclCurrent = uiwCurrent.Picklistcollection(PICKLIST_CUSTOM, True, ndbCurrent.Server, ndbCurrent.Filepath, CON_VIEW_NAME, ndbCurrent.Title, "Zu übertragende Signatur(en) wählen:", strTemplate)
	Else
		'started from view => run on selected documents
		Set dclCurrent = dclSelect
	End If
	
	If dclCurrent.count = 0 Then Exit Sub
	
	Set agtPush = ndbCurrent.Getagent("aaBEPush2Mail")
	
	Set docNext = dclCurrent.GetFirstDocument
	count = 0
	While Not docNext Is Nothing
		Set docProcess = docNext
		Print "verarbeite " & docProcess.FullName(0)
		Set docNext = dclCurrent.GetNextDocument ( docNext )
		
		docid = docProcess.Universalid
		
		'Process Document
		If docProcess.Status(0) = "0" Or (docProcess.Status(0) = "1" And docProcess.pushed(0) = "1") Then
			'only on active signatures, or signatures to reset
			docProcess.ForceUpdate = "1"
			Call docProcess.save ( True, False, True )
			
			Call agtPush.Runonserver(docProcess.Noteid)
			
			'if there was an error pushing signature to mailfile, the document has been flagged
			're-get the document and check for this flag
			Set docTemp = ndbCurrent.GetDocumentByUnid ( docid )
			If docTemp.transmit(0) = "0" Then
				MsgBox docTemp.fullname(0) & " konnte nicht übertragen werden", 0+48, ndbCurrent.Title
			Else
				count = count + 1
			End If
			Set docTemp = nothing			
		End if
		
	Wend
	
	msgbox CStr(count) & " Signatur(en) wurde(n) in die Maildatei übertragen.",0+64,ndbCurrent.Title
	
End Sub

'++LotusScript Development Environment:2:2:setActive:1:8
Sub setActive(strTemplate As String, uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase, dclSelect As NotesDocumentCollection)
	Const CON_VIEW_NAME = "plSignatureInActive"
	On Error GoTo ErrorHandler
	
	Dim dclCurrent As NotesDocumentCollection
	Dim docNext As NotesDocument
	Dim docProcess As NotesDocument
	Dim setCurrent As New Setup(ndbCurrent.parent)
	Dim prodInfo As ProductInfoSM
	Dim count As integer
	
	If dclSelect Is Nothing Then
		'started from portal => select document(s) now
		'pre check if there are documents...
		Set dclCurrent = ndbCurrent.Getview(CON_VIEW_NAME).Getalldocumentsbykey(strTemplate, True)
		If dclCurrent.count = 0 Then
			MessageBox "Für das Schema "& strTemplate & " gibt es keine Signaturen zum aktivieren",0+48,ndbCurrent.Title
			Exit Sub
		End If
		Set dclCurrent = uiwCurrent.Picklistcollection(PICKLIST_CUSTOM, True, ndbCurrent.Server, ndbCurrent.Filepath, CON_VIEW_NAME, ndbCurrent.Title, "Zu aktivierende Signatur(en) wählen:", strTemplate)
	Else
		'started from view => run on selected documents
		Set dclCurrent = dclSelect
	End If
	
	If dclCurrent.count = 0 Then
		Exit Sub
	End If
	Set prodInfo = setCurrent.getProductInfo()
	If (dclCurrent.count > prodInfo.getUnusedCount()) Then
		MessageBox "Aktuell können nur noch " & prodInfo.getUnusedCount() & " Signaturen aktiviert werden." & Chr(13) & "Sie wollen " &dclCurrent.Count & " Signatur(en) aktivieren.",0+48, ndbCurrent.Title
		Exit Sub
	End If
	'Now check against the open Licence
	Set docNext = dclCurrent.getFirstdocument
	count = 0
	While Not (docNext Is Nothing)
		Set docProcess = docNext
		Print "verarbeite " & docProcess.FullName(0)
		Set docNext = dclCurrent.Getnextdocument(docNext)
		
		If docProcess.Status(0) = "1" Then
			docProcess.Status = "0"
			Call docProcess.save(True,False,True)
			count = count + 1
		End If
	Wend
	If count = 0 Then
		MessageBox "Es wurden keine Signaturen aktiviert",0+64,ndbCurrent.Title
	Else
		msgbox count & " Signatur(en) erfolgreich aktiviert. Der Update der Mailsignaturen erfolgt beim nächsten Update",0+64,ndbCurrent.Title
	End If
	
	Exit Sub
errorHandler:
	Call WGCLI_LogError("Error in setActive", Nothing)
	MessageBox "Bei der Verarbeitung ist ein Fehler aufgetreten"+Chr(13)+"Bitte kontaktieren Sie Ihren Administrator",0+16,"Fehler"
	Print "Error " & Error & " at line "& Erl
	Exit Sub
End Sub

'++LotusScript Development Environment:2:2:importNAB:1:8
Sub importNAB ( strSchema As String, sesCurrent As NotesSession, setCurrent As Setup, sigFactory As SignaturFactory, uiwCurrent As NotesUIWorkspace)	
	Dim count As Long
	count = importNABexec(strSchema, sesCurrent, setCurrent, sigFactory, uiwCurrent)	
End sub

'++LotusScript Development Environment:2:2:setInActive:1:8
Sub setInActive(strTemplate As String, uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase, dclSelect As NotesDocumentCollection)
	Const CON_VIEW_NAME = "plSignatureActive"
	On Error GoTo ErrorHandler
	Dim dclCurrent As NotesDocumentCollection
	Dim docNext As NotesDocument
	Dim docProcess As NotesDocument
	Dim count As integer
	
	If dclSelect Is Nothing Then
		'started from portal => select document(s) now
		'pre check if there are documents...
		Set dclCurrent = ndbCurrent.Getview(CON_VIEW_NAME).Getalldocumentsbykey(strTemplate, True)
		If dclCurrent.count = 0 Then
			MessageBox "Für das Schema "& strTemplate & " gibt es keine Signaturen zum deaktivieren",0+48,ndbCurrent.Title
			Exit Sub
		End If
		
		Set dclCurrent = uiwCurrent.Picklistcollection(PICKLIST_CUSTOM, True, ndbCurrent.Server, ndbCurrent.Filepath, CON_VIEW_NAME, ndbCurrent.Title, "Zu deaktivierende Signatur(en) wählen:", strTemplate)
	Else
		'started from view => run on selected documents
		Set dclCurrent = dclSelect
	End If
	
	If dclCurrent.count = 0 Then Exit Sub
	Set docNext = dclCurrent.getFirstdocument
	count = 0
	While Not (docNext Is Nothing)
		Set docProcess = docNext
		Print "verarbeite " & docProcess.FullName(0)
		Set docNext = dclCurrent.Getnextdocument(docNext)
		
		If docProcess.Status(0) = "0" then
			docProcess.Status = "1"
			Call docProcess.save(True,False,True)
			count = count + 1
		End if
	Wend
	If count = 0 Then
		MessageBox "Es wurden keine Signatur(en) deaktiviert.",0+64,ndbCurrent.Title
	Else
		MessageBox count & " Signatur(en) erfolgreich deaktiviert. Die Mailsignatur wird nicht mehr aktualisiert.",0+64,ndbCurrent.Title	
	End If
	
	Exit Sub
errorHandler:
	Call WGCLI_LogError("Error in setInActive", Nothing)
	MessageBox "Bei der Verarbeitung ist ein Fehler aufgetreten"+Chr(13)+"Bitte kontaktieren Sie Ihren Administrator",0+16,"Fehler"
	Print "Error " & Error & " at line "& Erl
	Exit Sub
End Sub

'++LotusScript Development Environment:2:1:zzzQuickSort:1:8
private Function zzzQuickSort(sArray As Variant) As Variant
	Dim sA() As String    
	Dim j As Long
	Dim bottom As Long
	Dim top As Long
	Dim vA As Variant
	
	bottom = LBound ( sArray )
	top = UBound ( sArray )
	ReDim sA( bottom To top ) As String     
	For j = bottom To top
		sA ( j ) = sArray ( j )
	Next
     ' DoQS does a QuickSort if the Sublist is longer than 10 elements
     ' Thus, when DoQS finishes, all elements are within 10 spots of their correct location.
     ' For lists that are close to being in order, an Insertion Sort is much faster than a QuickSort, so we
     ' run through the whole thing once doing an Insertion Sort to finish tidying up the order.
	Call zzzDoQS( sA, bottom, top )
	Call zzzDoInsertSort ( sA, bottom, top )
	ReDim vA(bottom To top) As Variant
	For j = bottom To top
		vA ( j ) = sA ( j )
	Next	
	zzzQuickSort = vA
End Function



'++LotusScript Development Environment:2:2:zzzImportPerson:2:8

Private Sub zzzImportPerson ( sigFactory As SignaturFactory, ndbCurrent As NotesDatabase, docNab As NotesDocument, strSchema As string )
	
	Dim docCheck As NotesDocument	
	
	Set docCheck = ndbCurrent.Createdocument()
	docCheck.form = "Signaturprofile"
	docCheck.Template = strSchema
	docCheck.Disclaimer = "1"
	docCheck.Automatically = "1"
	docCheck.Status = "1"		'not active
	Call docCheck.replaceItemValue("Authors", "[Import Agent]")
	docCheck.EditDates = CStr(Now)					
	Call sigFactory.updateFromNAB(docCheck, docNab)
	Call sigFactory.updateSignaturSchema(docCheck)
	Call sigFactory.updateSignatureFields(docCheck)
	Call docCheck.Computewithform(False, False)
	Call docCheck.save(True,False,True)
	
	Print docCheck.FullName(0) & " wurde angelegt"
	
End Sub

'++LotusScript Development Environment:2:1:getSchema:5:8
%REM
	Function getSchema
	Description: Comments for Function
%END REM
Function getSchema(uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase) As String
	Dim dclSignature As NotesDocumentCollection
	Dim docSignature As NotesDocument
	Set dclSignature = uiwCurrent.Picklistcollection(PICKLIST_CUSTOM, False, ndbCurrent.Server, ndbCurrent.Filepath, "plSchema", ndbCurrent.Title, "Schema wählen:")
	If dclSignature.count = 0 Then
		getSchema = ""
		Exit Function
	End If
	Set docSignature = dclSignature.Getfirstdocument()
	getSchema = docSignature.TTitle(0)	
End Function

'++LotusScript Development Environment:2:2:createDisclaimer:5:8
%REM
	Sub createDisclaimer
	Description: Comments for Sub
%END REM
Sub createDisclaimer( strSchema As String, uiwCurrent As NotesUIWorkspace,ndbCurrent As NotesDatabase)
	Dim docNew As NotesDocument
	Set docNew = ndbCurrent.Createdocument()
	docNew.Form = "Disclaimer"
	docNew.Template = strSchema
	Call uiwCurrent.Editdocument(True, docNew)
End Sub

'++LotusScript Development Environment:2:2:newSignature:1:8
Sub newSignature( strTemplate As String, uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase, setCurrent As Setup, sigFactory As SignaturFactory)
	Dim dclNab As NotesDocumentCollection
	Dim docNab As NotesDocument
	Dim docNew As NotesDocument
	Dim viwLUP As NotesView
	
	'must not be executed if automatic user maintenance from NAB is active!
	If setCurrent.getImportNAB = "1" Then
		MsgBox "Automatische Benutzerverwaltung ab Adressbuch ist aktiv", 0+48, ndbCurrent.Title
		Exit Sub
	End If
	
	If (strTemplate = "**ALL**") Then
		strTemplate = getSchema(Uiwcurrent, Ndbcurrent)
		If strTemplate = "" Then
			Exit Sub
		End If
	End If
	
	Set dclNab = uiwCurrent.Picklistcollection(PICKLIST_CUSTOM, true, setCurrent.getDirectoryServer(), "names.nsf",_
	"People", ndbCurrent.Title, "Benutzer wählen:")
	If dclNAB.count = 0 Then
		Exit Sub
	End If
	Set viwLUP = ndbCurrent.Getview("LUPSignatureByUser")
	
	Set docNab = dclNAB.Getfirstdocument()
	While Not docNAB Is Nothing
		'check if exists...		
		Set docNew = viwLUP.getDocumentByKey( docNab.FullName(0) )
		If Not(docNew Is Nothing) Then
			print docNab.LastName(0) +", "+ docNab.FirstName(0) +" hat bereits ein Signaturprofile."+Chr(13) +"Schema: "+ docNew.Template(0)
		Else
			Set docNew = ndbCurrent.createDocument
			docNew.form = "Signaturprofile"
			docNew.Template = strTemplate
			docNew.Disclaimer = "1"
			docNew.Automatically = "1"
			docNew.Status = "1"		'not active
			docNew.IndividuallyAdded = "1"			
			Call sigFactory.updateFromNAB(docNew, docNab)
			Call sigFactory.updateSignaturSchema(docNew)
			Call sigFactory.updateSignatureFields(docNew)
			Call docNew.Computewithform(False, False)
			Call docNew.save(True,False,True)
		End If
		
		Set docNAB = dclNAB.GetNextDocument ( docNAB )
	wend
	Call uiwCurrent.Viewrefresh()
End Sub

'++LotusScript Development Environment:2:2:setRefresh:1:8
Sub setRefresh(strTemplate As String, uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase, sigFactory As SignaturFactory, dclSelect As NotesDocumentCollection)
	Const CON_VIEW_NAME = "plSignatureAll"
	On Error GoTo ErrorHandler
	
	Dim sesCurrent As New NotesSession
	Dim ndbNab As NotesDatabase
	Dim viwNab As NotesView
	Dim dclCurrent As NotesDocumentCollection
	Dim docNext As NotesDocument
	Dim docProcess As NotesDocument
	Dim docNab As NotesDocument
	Dim counter As integer
	
	Dim setCurrent As New Setup(sesCurrent)
	
	If dclSelect Is Nothing Then
		'started from portal => select document(s) now
		'pre check if there are documents...
		Set dclCurrent = ndbCurrent.Getview(CON_VIEW_NAME).Getalldocumentsbykey(strTemplate, True)
		If dclCurrent.count = 0 Then
			MessageBox "Für das Schema "& strTemplate & " gibt es keine Signaturen zum aktualisieren.",0+48,ndbCurrent.Title
			Exit Sub
		End If
		Set dclCurrent = uiwCurrent.Picklistcollection(PICKLIST_CUSTOM, True, ndbCurrent.Server, ndbCurrent.Filepath, CON_VIEW_NAME, ndbCurrent.Title, "Zu aktualisiernde Signatur(en) auswählen:", strTemplate)
	Else
		'started from view => run on selected documents
		Set dclCurrent = dclSelect
	End If
	
	If dclCurrent.count = 0 Then Exit Sub
	
	Set ndbNAB = sesCurrent.Getdatabase(setCurrent.getDirectoryServer(),"names.nsf", False)	
	Set viwNAB = ndbNAB.Getview("($Users)")
	
	counter = 0
	
	Set docNext = dclCurrent.getFirstdocument
	While Not (docNext Is Nothing)
		Set docProcess = docNext
		Print "verarbeite " & docProcess.FullName(0)
		Set docNext = dclCurrent.Getnextdocument(docNext)
		
		Set docNAB = viwNab.GetDocumentByKey(docProcess.FullName(0), True)
		If docNab Is Nothing Then
			docProcess.Status = "1"
			docProcess.NABNotFound = "1"
			Call docProcess.save ( True, False, True )
			Call WGCLI_LogEvent( docProcess.FullName(0) & " wurde im NAB nicht gefunden", 2, 1, docProcess)
		Else
			Call sigFactory.updateFromNAB(docProcess, docNab)
			If docProcess.individual(0) = "" then		
				Call sigFactory.updateSignaturSchema(docProcess)				
			End If
			if sigFactory.updateSignatureFields(docProcess) = True Then
				counter = counter + 1
			End If
			Call docProcess.save(True,False,True)
		End if
	Wend
	MessageBox counter & " Signatur(en) erfolgreich aktualisiert. Die Mailsignatur wird bei der nächsten Aktualisierung in die Maildatei(en) übertragen.",0+64,ndbCurrent.Title
	Exit Sub
errorHandler:
	Call WGCLI_LogError("Error in setRefresh", Nothing)
	MessageBox "Bei der Verarbeitung ist ein Fehler aufgetreten"+Chr(13)+"Bitte kontaktieren Sie Ihren Administrator",0+16,"Fehler"
	Print "Error " & Error & " at line "& Erl
	Exit Sub
End Sub

'++LotusScript Development Environment:2:1:importNABexec:1:8
function importNABexec ( strSchema As String, sesCurrent As NotesSession, setCurrent As Setup, sigFactory As SignaturFactory, uiwCurrent As NotesUIWorkspace) As long
	On Error GoTo ErrorHandler
	
	Call WGCLI_LogEvent( "Import aus Adressbuch gestartet", 0, 3, Nothing)
	
	Dim ndbCurrent As NotesDatabase
	Dim ndbNAB As NotesDatabase	
	Dim viwCheck As NotesView
	Dim viwNAB As NotesView	
	Dim docNAB As NotesDocument
	Dim docCheck As NotesDocument
	Dim arrResult As Variant
	Dim blImport As Boolean
	
	importNABexec = 0

	Set ndbCurrent = sesCurrent.Currentdatabase
	
	If (strSchema = "**ALL**") Then
		strSchema = getSchema(Uiwcurrent, Ndbcurrent)
		If strSchema = "" Then
			Call WGCLI_LogEvent( "Kein Default Schema gefunden => Abbruch", 2, 1, nothing)
			Exit Function
		End If
	End If
	Set ndbNAB = sesCurrent.Getdatabase(setCurrent.getDirectoryServer(),"names.nsf", False)	
	Set viwNAB = ndbNAB.Getview("($Users)")
	Set viwCheck = ndbCurrent.Getview("LUPSignatureByUser")
	
	If setCurrent.getImportFilterType = 0 Then
		'import people based on group name(s)
		'get names of group members to import
		Dim membersToImport As Variant
		If ExpandGroupNames(ndbNAB.Server, setCurrent.getGroupsToImport, membersToImport) = False Then
			'could not resolve group
			Call WGCLI_LogEvent( "Es konnte keine Gruppe aufgelöst werden => Abbruch", 2, 1, Nothing)
			Exit Function
		End If
		
		ForAll user In membersToImport
			Set docNab = viwNAB.GetDocumentByKey ( user )
			If Not docNab Is Nothing Then
				Set docCheck = viwCheck.Getdocumentbykey(docNab.FullName(0), True)
				If (docCheck Is Nothing) Then
					Call zzzImportPerson (sigFactory, ndbCurrent, docNab, strSchema)
					importNABexec = importNABexec + 1				
				End If				
			End If
		End ForAll
		
	ElseIf setCurrent.getImportFilterType = 1 Then
		'import people from view - using formula filter criteria
		Set docNab = viwNAB.Getfirstdocument()
		While Not (docNab Is Nothing)
			blImport = False
			If setCurrent.getDirectoryRestriction() <> "" Then
				arrResult = Evaluate(setCurrent.getDirectoryRestriction(),docNab)
				If arrResult(0) = "1" Then
					blImport = True
				End If
			Else
				blImport = True
			End If
			If docNab.MailServer(0) <> "" And docNab.MailFile(0) <> "" And blImport Then
				Set docCheck = viwCheck.Getdocumentbykey(UCase(docNab.FullName(0)), True)
				If (docCheck Is Nothing) Then
					Call zzzImportPerson (sigFactory, ndbCurrent, docNab, strSchema)
					importNABexec = importNABexec + 1				
				End If
			End If
			Set docNab = viwNab.Getnextdocument(docNab)
		Wend
	Else
		'no filter specified
		Set viwNAB = ndbNAB.Getview("People")		'change view to import
		Set docNab = viwNAB.Getfirstdocument()
		While Not (docNab Is Nothing)			
			If docNab.MailServer(0) <> "" And docNab.MailFile(0) <> "" Then
				Set docCheck = viwCheck.Getdocumentbykey(docNab.FullName(0), True)
				If (docCheck Is Nothing) Then
					'no user document yet
					Call zzzImportPerson (sigFactory, ndbCurrent, docNab, strSchema)
					importNABexec = importNABexec + 1
				Else
					'user document available
					If docCheck.NABNotFound(0) = "1" Then
						'if to be reactivated
						docCheck.NABNotFound = ""
						Call sigFactory.updateFromNAB(docCheck, docNab)
						Call sigFactory.updateSignaturSchema(docCheck)
						Call sigFactory.updateSignatureFields(docCheck)
						Call docCheck.Computewithform(False, False)
						Call docCheck.save(True,False,True)
					End if
				End If
			End If
			Set docNab = viwNab.Getnextdocument(docNab)
		Wend
	End If
	
	Call WGCLI_LogEvent( "Import aus Adressbuch beendet", 0, 3, Nothing)
	Exit Function
	
ErrorHandler:
	Call WGCLI_LogError("Error in importNABexec", Nothing)	
	Exit Function
End function

'++LotusScript Development Environment:2:2:zzzDoInsertSort:2:8

private Sub zzzDoInsertSort ( sA() As String, ByVal bottom As Long, ByVal top As Long )	
	Dim i As Long
	Dim x As Long
	Dim v As String
	Dim Found As Integer
	For i = bottom+1 To top
		x = i
		v = sA (i )
		Do While (sA(x-1) > v)
			sA ( x ) = sA ( x-1 )
			x = x - 1
			If x=0 Then
				Exit Do
			End If
		Loop
		sA (x) = v
	Next
End Sub

'++LotusScript Development Environment:2:2:resetCalendarProfile:1:8
Sub resetCalendarProfile ( uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase )
	
	Dim dbMail As New NotesDatabase ("","")
	Dim docProfile As NotesDocument
	Dim docCurrent As NotesDocument
	
	Set docCurrent = uiwCurrent.CurrentDocument.Document
	
	Call dbMail.Open (docCurrent.Server(0), docCurrent.MailFile(0))
	If Not dbMail.IsOpen Then
		MsgBox "Maildatei konnte nicht geöffnet werden", 0+16, ndbCurrent.Title
		Exit sub
	End If
	
	Set docProfile = dbMail.GetProfileDocument ("CalendarProfile")
	If Not docProfile Is Nothing Then
		Call docProfile.Remove ( True )
		Set docProfile = dbMail.GetProfileDocument ("CalendarProfile")
		Call docProfile.save ( True, False, True )
		MsgBox "Kalenderprofil zurückgesetzt", 0+64, ndbCurrent.Title
	End If
	
End Sub

'++LotusScript Development Environment:2:2:createSchema:1:8
Sub createSchema( uiwCurrent As NotesUIWorkspace,ndbCurrent As NotesDatabase)
	Dim docNew As NotesDocument
	Set docNew = ndbCurrent.Createdocument()
	docNew.Form = "frmTemplate"
	Call uiwCurrent.Editdocument(True, docNew)
End Sub

'++LotusScript Development Environment:2:2:setNewSchema:1:8
Sub setNewSchema(strTemplate As String, uiwCurrent As NotesUIWorkspace, ndbCurrent As NotesDatabase, sigFactory As SignaturFactory, dclSelect As NotesDocumentCollection)
	Const CON_VIEW_NAME = "plSignatureAll"
	On Error GoTo ErrorHandler
	Dim dclCurrent As NotesDocumentCollection
	Dim docNext As NotesDocument
	Dim docProcess As NotesDocument
	Dim dclSignature As NotesDocumentCollection
	Dim docSignature As NotesDocument
	Dim counter As integer
	
	If dclSelect Is Nothing Then
		'started from portal => select document(s) now
		'pre check if there are documents...
		Set dclCurrent = ndbCurrent.Getview(CON_VIEW_NAME).Getalldocumentsbykey(strTemplate, True)
		If dclCurrent.count = 0 Then
			MessageBox "Für das Schema "& strTemplate & " gibt es keine Signaturen für einen Schemawechsel.",0+48,ndbCurrent.Title
			Exit Sub
		End If
		Set dclCurrent = uiwCurrent.Picklistcollection(PICKLIST_CUSTOM, True, ndbCurrent.Server, ndbCurrent.Filepath, CON_VIEW_NAME, ndbCurrent.Title, "Signatur(en) für einen Schemawechsel wählen:", strTemplate)
	Else
		'started from view => run on selected documents
		Set dclCurrent = dclSelect
	End if
	
	If dclCurrent.count = 0 Then Exit Sub
	
	counter = 0
	
	Set dclSignature = uiwCurrent.Picklistcollection(PICKLIST_CUSTOM, False, ndbCurrent.Server, ndbCurrent.Filepath, "plSchema", ndbCurrent.Title, "Neues Schema wählen:")
	If dclSignature.count = 0 Then Exit Sub
	Set docSignature = dclSignature.Getfirstdocument()
	Set docNext = dclCurrent.getFirstdocument
	While Not (docNext Is Nothing)
		Set docProcess = docNext
		Print "verarbeite " & docProcess.FullName(0)
		Set docNext = dclCurrent.Getnextdocument(docNext)
		
		docProcess.Template = docSignature.TTitle(0)
		Call sigFactory.updateSignaturSchema(docProcess)
		if sigFactory.updateSignatureFields(docProcess) = True Then
			counter = counter + 1
		End If
		Call docProcess.save(True,False,True)
	Wend
	MessageBox counter & " Signatur(en) erfolgreich geändert. Die Mailsignatur wird bei der nächsten Aktualisierung in die Maildatei(en) übertragen.",0+64,ndbCurrent.Title
	Exit Sub
errorHandler:
	Call WGCLI_LogError("Error in setNewSchema", Nothing)
	MessageBox "Bei der Verarbeitung ist ein Fehler aufgetreten"+Chr(13)+"Bitte kontaktieren Sie Ihren Administrator",0+16,"Fehler"
	Print "Error " & Error & " at line "& Erl
	Exit Sub
End Sub
